{
	"info": {
		"_postman_id": "9bdc06f6-b69a-456b-8a98-c9ea397610f7",
		"name": "Ordercloud API Collection",
		"description": "This Ordercloud API Exercise is aimed to help you get familiar with and utilizing all of the different endpoints offered in the API.  For the length of the exercise, we will work with one Company and one Product Catalog.  The organization and product catalog structures are outlined for you - allowing you to focus on the core concepts.  This exercise is to be completed in the program Postman.  We will be using environment variables to help streamline the workflow, you can read about those <a href=\"https://developers.onelogin.com/api-docs/1/getting-started/postman-collections\">here</a>.  There is a template <a href=\"https://drive.google.com/file/d/19PSluJmcFZ6Amfqc07R63dotTuPVCNRE/view?usp=sharing\">here</a> with all of the different keys you will be using throughout these exercises, you can import them into your postman environment and fill in the values as you go.\n\nNorthern Lights Coffee is a Coffee Supply Company that sells products to two different coffee shops: Metro Coffee and Cloud Coffee.  NLC is in need of a B2B Custom solution that will allow them to create and manage catalogs with products and have those products visible to their different coffee shops (Buyers) for them to purchase to be sold/used in their coffee shops.  The organization structure is as follows (you will want to refer back to this diagram for insight into different organizational considerations while going through the exercises).\n\n## Northern Lights Coffee Org Structure\n<img src=\"https://drive.google.com/uc?id=19ikPDerhA7h1ugpJ7sTb6em9on4bAfzd\"\n     alt=\"NLC Org Structure\"\n     style=\"float: left; margin-right: 10px;\" />\n     \n## Product Catalog\n<img src=\"https://drive.google.com/uc?id=1g3yv8EGlhy807LspnpL0N817COTzbZe_\"\n     alt=\"NLC Org Structure\"\n     style=\"float: left; margin-right: 10px;\" />\n     \n## Postman\nThis exercise will be facilitated by an application called Postman.  If you don't yet have it installed, visit this <a href=\"https://www.getpostman.com/downloads/\">Link</a> to install.\n\nWhat is Postman?  For a nice article that can explain it better than I - click <a href=\"https://www.digitalcrafts.com/blog/student-blog-what-postman-and-why-use-it\">here</a>.\n\n## Preparation\nThe first thing you will want to do before you begin the exercises is visit the <a href=\"https://portal.ordercloud.io/register\">OrderCloud Portal</a> and register for an account. This grants you access to create OrderCloud organizations and manipulate them through the API Console, which you will use frequently when developing Ordercloud Applications. If you already created an account, go ahead and sign in using your credentials.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Getting Started",
			"item": [],
			"description": "## Create a New Seller Organization\nNow that you're logged into the OrderCloud Portal, you should be able to view your dashboard. If this is your first time logging in it may seem a little empty right now. The first thing you'll do at the beginning of any OrderCloud project is create a new Seller Organization. You can do this by clicking on the **NEW ORGANIZATION** button in the upper right corner of the Seller Organizations widget. This opens up a dialog where you can enter in the necessary details for a new Seller Organization. You can choose the name of the seller organization. For the purposes of these exercises let's use the example _\"Northern Lights Coffee\"_ for the Organization name. \n<br/><br/>\n\n<img src=\"https://drive.google.com/uc?id=1dEIy-S1VoJ-83EuRJnLfWp3QCFePTays\"\n     alt=\"New Org Widget\"\n     style=\"float: left; margin-right: 10px;\" />\n<br/><br/>\nWhen ready, click the **CREATE ORGANIZATION** button at the bottom. \n\n## Environment Variables\nOnce your organization has been created you will be directed to it's settings page. Here you can access the ID of your Seller Organization - copy it and add it to your Postman environment variables (CTRL + ALT + E) under `org_id`. Make sure you add the values to both the ‘Initial Value’ and ‘Current Value’ fields (this has something to do with Postman not storing values in a database, as some of this data can be sensitive).\n\n> If you haven't used the Portal's API Console before, [read this article](https://ordercloud.io/getting-started/using-the-portal#using-the-api-console).\n\nNext, you need to create an API client for both your buyer and seller application. API Clients define various access points to your organizations data. These access points have properties that control what parties can use it, how they can gain access and for how long that access remains valid. We need an API client before we can get a valid OrderCloud token.\n\nNavigate to the OrderCloud [**API CONSOLE**](https://portal.ordercloud.io/console) and click **API CLIENTS**. Select **CREATE NEW API CLIENT** to create buyer and seller clients with the options shown.\n\nFirst, go ahead and create the seller client. Only seller users can authenticate via this seller client.\n<img src=\"https://drive.google.com/uc?id=1IzXJ1IBadUI01RyaupC-DchIWpBCD516\"\n     alt=\"Create Seller Client\"\n     style=\"float: left; margin-right: 10px;\" />\n<br/><br/>\n\nThen go ahead and create the buyer client. Only buyer users can authenticate via this buyer client.\n\n<img src=\"https://drive.google.com/uc?id=128hV94cw-cfp8XYCYMKeT0HuHDULZwbg\"\n     alt=\"Create Buyer Client\"\n     style=\"float: left; margin-right: 10px;\" />\n<br/><br/>\n\nUpdate your environmental variables with values for `clientID_seller` and `clientID_buyer`.\n\nNow we need to create an admin user and an initial buyer. Click **ADMIN USERS** and create an admin user with username `nlcadmin`. Make sure to check the **ACTIVE** box.\n\n<img src=\"https://drive.google.com/uc?id=1lU26_jSBxr4VCGlFDpeSodqsvY6RP8BX\"\n     alt=\"Create Admin User\"\n     style=\"float: left; margin-right: 10px;\" />\n<br/><br/>\n\nUpdate your environmental variables with values for `admin_username` (nlcadmin), `admin_password` and `admin_user_id`.\n\nSelect **BUYERS** to create your initial buyer. Use `metro_coffee` for the id and check the **ACTIVE** box.\n\n<img src=\"https://drive.google.com/uc?id=1s5fVWmB6sYRpg3-j5rX6dkb7FDqtnwf_\"\n     alt=\"Create Buyer\"\n     style=\"float: left; margin-right: 10px;\" />\n<br/><br/>\n\nUpdate your environmental variables with values for `buyer_username` (metrocoffeebuyer) and `buyerID` (metro_coffee).\n\nTo complete the initial setup, you need to create security profiles and assign _\"Full Access\"_ to your admin user. From the OrderCloud API Console, navigate to **SECURITY PROFILES** and click **CREATE NEW SECURITY PROFILE**. Create one with `Name` and `ID` `FullAccess`.\n\n<img src=\"https://drive.google.com/uc?id=14Thgy9l2yzXNGumUnoF8rczt6fGMz9M5\"\n     alt=\"Create FullAccess Security Profile\"\n     style=\"float: left; margin-right: 10px;\" />\n<br/><br/>\n\nNext, create another Security Profile for buyer access with `Name` and `ID` `buyerProfile1`.\n\n<img src=\"https://drive.google.com/uc?id=1kwftxoqafvYp3AczIrUBZ8RheNLXENG7\"\n     alt=\"Create Buyer Security Profile\"\n     style=\"float: left; margin-right: 10px;\" />\n<br/><br/>\n\nFinally, assign your admin user to the FullAccess profile. Click the lightning bolt icon to reveal a dropdown containing relevant HTTP requests and select **POST CREATE OR UPDATE A SECURITY PROFILE ASSIGNMENT**. Input **Security Profile ID:** `FullAccess` and use the generated ID you stored as adminUserID for **User ID**.\n\n<img src=\"https://drive.google.com/uc?id=1HdVpVAuI299TrV6HgvQV9TO2-yskD79M\"\n     alt=\"Assign Security Profile\"\n     style=\"float: left; margin-right: 10px;\" />\n<br/><br/>\n\n> For more information on how Organization Hierarchy works see [this article](https://ordercloud.io/main-concepts/organization-hierarchy). \n\n\n",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "2. Authentication",
			"item": [
				{
					"name": "Get Admin User Token (nlcadmin)",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "client_id",
									"value": "{{clientID_Admin}}",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "FullAccess",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "{{clientSecret_admin}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text",
									"disabled": true
								},
								{
									"key": "username",
									"value": "test-buyer-user",
									"type": "text",
									"disabled": true
								},
								{
									"key": "password",
									"value": "Xcentium123!",
									"type": "text",
									"disabled": true
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseApiUrl}}/oauth/token",
							"host": [
								"{{baseApiUrl}}"
							],
							"path": [
								"oauth",
								"token"
							]
						}
					},
					"response": []
				}
			],
			"description": "## Getting Tokens\r\nEach of the requests in this folder is for retrieving an OrderCloud `access_token` for a specific user in your organization. We've already stored the necessary information for making these requests in the previous exercises **Environment Variables** section. You will be using these commands to get (and refresh) user tokens each day you work on these exercises as each token will expire ~8.5 hours after they're generated.\r\n\r\nRun the **Get Admin User Token (nlcadmin)** request now and observe the data you get back. There's an `access_token` as well as `bearer_type` and an `expires_in` integer. Bearer tokens are going to be used on every single request that we make to the OrderCloud API. The type of tokens we use are structured JWT tokens (you can read about Bearer tokens [here](https://oauth.net/2/bearer-tokens/)).\r\n\r\n## Storing Tokens\r\nFor the purposes of these exercises we will be asking you to store the `access_token`s you get back from these requests in Postman environment variables. For example, take the Admin User `access_token` you just got back and save it under the `admin_token` environment variable. Now, whenever an operation needs to be executed on behalf of an Admin (Seller) user Postman will automatically add the correct token to your Authorization details. Each _\"Get Buyer Token\"_ request has it's own corresponding `buyer_token` environment variable with the user's Name appended to it.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "3. Expanding Initial Buyer (Metro Coffee)",
			"item": [
				{
					"name": "A. Creating More Buyer Users (Metro Coffee)",
					"item": [
						{
							"name": "Create Buyer User (Jill Test)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"jill\",\r\n  \"Username\": \"jill\",\r\n  \"Password\": \"test1234\",\r\n  \"FirstName\": \"Jill\",\r\n  \"LastName\": \"Test\",\r\n  \"Email\": \"jill@test.com\",\r\n  \"Phone\": \"222-222-2222\",\r\n  \"TermsAccepted\": \"2018-01-01T00:00:00-06:00\",\r\n  \"Active\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer User (Bill Test)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"bill\",\r\n  \"Username\": \"bill\",\r\n  \"Password\": \"test1234\",\r\n  \"FirstName\": \"Bill\",\r\n  \"LastName\": \"Test\",\r\n  \"Email\": \"bill@test.com\",\r\n  \"Phone\": \"222-222-2222\",\r\n  \"TermsAccepted\": \"2018-01-01T00:00:00-06:00\",\r\n  \"Active\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer User (Jon Test)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"jon\",\r\n  \"Username\": \"jon\",\r\n  \"Password\": \"test1234\",\r\n  \"FirstName\": \"Jon\",\r\n  \"LastName\": \"Test\",\r\n  \"Email\": \"jon@test.com\",\r\n  \"Phone\": \"222-222-2222\",\r\n  \"TermsAccepted\": \"2018-01-01T00:00:00-06:00\",\r\n  \"Active\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "The next step is to create more buyer users for the initial buyer we created, Metro Coffee.  In a traditional business case, the administrator would create new buyer users, so we will be using the admin token for authentication.  We will create three more buyer users.  Go ahead and inspect, then run the requests in 3A.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "B. Create Buyer User Groups",
					"item": [
						{
							"name": "Create Buyer User Group (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"uptown\",\r\n  \"Name\": \"Uptown\",\r\n  \"Description\": \"Metro Coffee - Uptown\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer User Group (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"northeast\",\r\n  \"Name\": \"Northeast\",\r\n  \"Description\": \"Metro Coffee - Northeast\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that we have our buyer users, we want to organize them into buyer user groups, which in our business case represent different locations of the Metro Coffee franchise.  We have Metro Coffee - Northeast, and Metro Coffee - Uptown.  Before we can organize our users into these groups, we have to create them! Go ahead and run the requests.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "C. Assign Buyer Users to Buyer User Groups",
					"item": [
						{
							"name": "Assign Buyer User (Jill Test) to Buyer User Group (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"UserGroupID\": \"uptown\",\r\n  \"UserID\": \"jill\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Buyer User (Bill Test) to Buyer User Group (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"UserGroupID\": \"northeast\",\r\n  \"UserID\": \"bill\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Buyer User (Jon Test) to Buyer User Group (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"UserGroupID\": \"northeast\",\r\n  \"UserID\": \"jon\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer User Group Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups",
										"assignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that we have our users and user groups created, we need to assign users to the different user groups. We will do this through Buyer/UserGroup assignments.  Go ahead and run the requests. These requests don’t have anything in the response body, so to confirm the assignments were made, at the end we will List Buyer User Group Assignments.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "D. Create Buyer Addresses",
					"item": [
						{
							"name": "Create Buyer Address (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"uptown\",\r\n  \"CompanyName\": \"Metro Coffee - Uptown\",\r\n  \"FirstName\": \"Jill\",\r\n  \"LastName\": \"Test\",\r\n  \"Street1\": \"2504 Rocket Drive\",\r\n  \"Street2\": \"\",\r\n  \"City\": \"Minneapolis\",\r\n  \"State\": \"MN\",\r\n  \"Zip\": \"55409\",\r\n  \"Country\": \"US\",\r\n  \"Phone\": \"6128244475\",\r\n  \"AddressName\": \"Uptown Shipping\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer Address (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"northeast\",\r\n  \"CompanyName\": \"Metro Coffee - Northeast\",\r\n  \"FirstName\": \"Bill\",\r\n  \"LastName\": \"Test\",\r\n  \"Street1\": \"591 Willson St NE\",\r\n  \"Street2\": \"\",\r\n  \"City\": \"Minneapolis\",\r\n  \"State\": \"MN\",\r\n  \"Zip\": \"55401\",\r\n  \"Country\": \"US\",\r\n  \"Phone\": \"6128059997\",\r\n  \"AddressName\": \"Northeast Shipping\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Addresses",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses"
									]
								}
							},
							"response": []
						}
					],
					"description": "Next, we’ll create Addresses for each of our franchise locations (User Groups).  These addresses represent the addresses for which can be used for ‘Billing’, ‘Shipping’ or both.  We will define those parameters when we assign these addresses to the User Groups in the next step.  Go ahead and run the requests. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "E. Assign Buyer Addresses to Buyer User Groups",
					"item": [
						{
							"name": "Assign Buyer Address (Uptown) to Buyer User Group (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AddressID\": \"uptown\",\r\n  \"UserID\": \"\",\r\n  \"UserGroupID\": \"uptown\",\r\n  \"IsShipping\": true,\r\n  \"IsBilling\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Buyer Address (Northeast) to Buyer User Group (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AddressID\": \"northeast\",\r\n  \"UserID\": \"\",\r\n  \"UserGroupID\": \"northeast\",\r\n  \"IsShipping\": true,\r\n  \"IsBilling\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Address Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses",
										"assignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that we have the addresses created, we will assign them to their respective User Groups.  Notice that in the request body, we are defining whether or not the address is to be used for Billing, Shipping, or both.  Go ahead and run the requests. These requests yield no response body, so to confirm our assignments were made, we will make a request to List Buyer Address Assignments.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "F. Create Buyer Spending Accounts",
					"item": [
						{
							"name": "Create Buyer Spending Account (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"uptown_spending_account\",\r\n  \"Name\": \"Uptown Store Budget\",\r\n  \"Balance\": 25000,\r\n  \"AllowAsPaymentMethod\": true,\r\n  \"RedemptionCode\": \"\",\r\n  \"StartDate\": \"\",\r\n  \"EndDate\": \"\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer Spending Account (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"northeast_spending_account\",\r\n  \"Name\": \"Northeast Store Budget\",\r\n  \"Balance\": 50000,\r\n  \"AllowAsPaymentMethod\": true,\r\n  \"RedemptionCode\": \"\",\r\n  \"StartDate\": \"\",\r\n  \"EndDate\": \"\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Spending Accounts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts"
									]
								}
							},
							"response": []
						}
					],
					"description": "Next we’ll create Spending Accounts.  Go ahead and run the requests. ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "G. Assign Buyer Spending Accounts to Buyer User Groups",
					"item": [
						{
							"name": "Assign Buyer Spending Account (Uptown) to Buyer User Group (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"SpendingAccountID\": \"uptown_spending_account\",\r\n  \"UserID\": \"\",\r\n  \"UserGroupID\": \"uptown\",\r\n  \"AllowExceed\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Buyer Spending Account (Northeast) to Buyer User Group (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"SpendingAccountID\": \"northeast_spending_account\",\r\n  \"UserID\": \"\",\r\n  \"UserGroupID\": \"northeast\",\r\n  \"AllowExceed\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Spending Accounts Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts",
										"assignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now we’ll assign those newly created spending accounts to their respective User Groups! Go ahead and run those requests, then run the request to List Buyer Spending Account Assignments.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Let's expand on our intial Buyer we created when we created our organization!",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "4. Creating and Expanding Second Buyer (Cloud Coffee)",
			"item": [
				{
					"name": "A. Create Second Buyer (Cloud Coffee)",
					"item": [
						{
							"name": "Create Buyer (Cloud Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"cloud_coffee\",\r\n  \"Name\": \"Cloud Coffee\",\r\n  \"DefaultCatalogID\": \"\",\r\n  \"Active\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers"
									]
								}
							},
							"response": []
						}
					],
					"description": "First, we'll create the Buyer. To do this, we will still be authenticating as the admin user, using the `admin_token`.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "B. Create Buyer Users",
					"item": [
						{
							"name": "Create Buyer User (Grace Test)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"grace\",\r\n  \"Username\": \"grace\",\r\n  \"Password\": \"test1234\",\r\n  \"FirstName\": \"Grace\",\r\n  \"LastName\": \"Test\",\r\n  \"Email\": \"grace@test.com\",\r\n  \"Phone\": \"222-222-2222\",\r\n  \"TermsAccepted\": \"2018-01-01T00:00:00-06:00\",\r\n  \"Active\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer User (June Test)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"june\",\r\n  \"Username\": \"june\",\r\n  \"Password\": \"test1234\",\r\n  \"FirstName\": \"June\",\r\n  \"LastName\": \"Test\",\r\n  \"Email\": \"june@test.com\",\r\n  \"Phone\": \"222-222-2222\",\r\n  \"TermsAccepted\": \"2018-01-01T00:00:00-06:00\",\r\n  \"Active\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer User (Todd Test)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"todd\",\r\n  \"Username\": \"todd\",\r\n  \"Password\": \"test1234\",\r\n  \"FirstName\": \"Todd\",\r\n  \"LastName\": \"Test\",\r\n  \"Email\": \"todd@test.com\",\r\n  \"Phone\": \"222-222-2222\",\r\n  \"TermsAccepted\": \"2018-01-01T00:00:00-06:00\",\r\n  \"Active\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "The next few steps are going to be pretty similar to what we did for the first buyer - but this time we will be following the steps for the second buyer we just created: `cloud_coffee`.  You will need to make sure that you change the environment variable `buyerID` to `cloud_coffee` in your env vars.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "C. Create Buyer User Groups",
					"item": [
						{
							"name": "Create Buyer User Group (Los Angeles)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"la\",\r\n  \"Name\": \"Los Angeles\",\r\n  \"Description\": \"Cloud Coffee - Los Angeles\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer User Group (Burbank)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"burbank\",\r\n  \"Name\": \"Burbank\",\r\n  \"Description\": \"Cloud Coffee - Burbank\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that we've created our three buyer users, lets assign them to our two different User Groups that represent the franchise locations: Los Angeles and Burbank.  First, we need to create these Buyer User Groups.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "D. Assign Buyer Users to Buyer User Groups",
					"item": [
						{
							"name": "Assign Buyer User (Grace Test) to Buyer User Group (Los Angeles)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"UserGroupID\": \"la\",\r\n  \"UserID\": \"grace\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Buyer User (Todd Test) to Buyer User Group (Burbank)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"UserGroupID\": \"burbank\",\r\n  \"UserID\": \"todd\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Buyer User (June Test) to Buyer User Group (Burbank)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"UserGroupID\": \"burbank\",\r\n  \"UserID\": \"june\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer User Group Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/usergroups/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"usergroups",
										"assignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that we have our Buyer User Groups created, lets assign our different users to their respecitve User Groups.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "E. Create Buyer Addresses",
					"item": [
						{
							"name": "Create Buyer Address (Los Angeles)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"la_shipping\",\r\n  \"CompanyName\": \"Cloud Coffee - Los Angeles\",\r\n  \"FirstName\": \"Grace\",\r\n  \"LastName\": \"Test\",\r\n  \"Street1\": \"804 Thompson Street\",\r\n  \"Street2\": \"\",\r\n  \"City\": \"Los Angeles\",\r\n  \"State\": \"CA\",\r\n  \"Zip\": \"90017\",\r\n  \"Country\": \"US\",\r\n  \"Phone\": \"3102103355\",\r\n  \"AddressName\": \"Los Angeles Shipping\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer Address (Burbank)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"burbank_shipping\",\r\n  \"CompanyName\": \"Cloud Coffee - Burbank\",\r\n  \"FirstName\": \"Todd\",\r\n  \"LastName\": \"Test\",\r\n  \"Street1\": \"3055 Joy Lane\",\r\n  \"Street2\": \"\",\r\n  \"City\": \"Burbank\",\r\n  \"State\": \"CA\",\r\n  \"Zip\": \"91502\",\r\n  \"Country\": \"US\",\r\n  \"Phone\": \"2139260601\",\r\n  \"AddressName\": \"Burbank Shipping\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Addresses",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses"
									]
								}
							},
							"response": []
						}
					],
					"description": "Next, let's create Buyer Addresses that we can associate each of these franchise locations (Buyer User Groups) to.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "F. Assign Buyer Addresses to Buyer User Groups",
					"item": [
						{
							"name": "Assign Buyer Address (LA Shipping) to Buyer User Group (Los Angeles)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AddressID\": \"la_shipping\",\r\n  \"UserID\": \"\",\r\n  \"UserGroupID\": \"la\",\r\n  \"IsShipping\": true,\r\n  \"IsBilling\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Buyer Address (Burbank Shipping) to Buyer User Group (Burbank)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"AddressID\": \"burbank_shipping\",\r\n  \"UserID\": \"\",\r\n  \"UserGroupID\": \"burbank\",\r\n  \"IsShipping\": true,\r\n  \"IsBilling\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Address Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/addresses/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"addresses",
										"assignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that both our Cloud Coffee Users and Addresses are created, let's make the assignments.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "G. Create Buyer Spending Accounts",
					"item": [
						{
							"name": "Create Buyer Spending Account (Los Angeles)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"la_spending_account\",\r\n  \"Name\": \"Los Angeles Store Budget\",\r\n  \"Balance\": 25000,\r\n  \"AllowAsPaymentMethod\": true,\r\n  \"RedemptionCode\": \"\",\r\n  \"StartDate\": \"\",\r\n  \"EndDate\": \"\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Buyer Spending Account (Burbank)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"burbank_spending_account\",\r\n  \"Name\": \"Burbank Store Budget\",\r\n  \"Balance\": 50000,\r\n  \"AllowAsPaymentMethod\": true,\r\n  \"RedemptionCode\": \"\",\r\n  \"StartDate\": \"\",\r\n  \"EndDate\": \"\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Spending Accounts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now, we will create Spending Accounts to associate with each of our locations (Buyer User Groups).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "H. Assign Buyer Spending Accounts to Buyer User Groups",
					"item": [
						{
							"name": "Assign Buyer Spending Account (Los Angeles) to Buyer User Group (Los Angeles)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"SpendingAccountID\": \"la_spending_account\",\r\n  \"UserID\": \"\",\r\n  \"UserGroupID\": \"la\",\r\n  \"AllowExceed\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Buyer Spending Account (Burbank) to Buyer User Group (Burbank)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"SpendingAccountID\": \"burbank_spending_account\",\r\n  \"UserID\": \"\",\r\n  \"UserGroupID\": \"burbank\",\r\n  \"AllowExceed\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Buyer Spending Accounts Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/spendingaccounts/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"spendingaccounts",
										"assignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now let's assign these Spending Accounts to their respective locations.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Now that we have our first Buyer created and fleshed out, lets create a second Buyer to represent a second Coffee Shop that will be ordering product from Northern Lights Coffee as well.  This Coffee Shop will also have two franchise locations: Los Angeles and Burbank.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "5. Assign Security Profiles to Buyers",
			"item": [
				{
					"name": "Assign Security Profile (buyerProfile1) to Buyer (Metro Coffee)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SecurityProfileID\": \"buyerProfile1\",\r\n  \"BuyerID\": \"metro_coffee\"\r\n}"
						},
						"url": {
							"raw": "{{baseApiUrl}}/v1/securityprofiles/assignments",
							"host": [
								"{{baseApiUrl}}"
							],
							"path": [
								"v1",
								"securityprofiles",
								"assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Security Profile (buyerProfile1) to Buyer (Cloud Coffee)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"SecurityProfileID\": \"buyerProfile1\",\r\n  \"BuyerID\": \"cloud_coffee\"\r\n}"
						},
						"url": {
							"raw": "{{baseApiUrl}}/v1/securityprofiles/assignments",
							"host": [
								"{{baseApiUrl}}"
							],
							"path": [
								"v1",
								"securityprofiles",
								"assignments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch buyerProfile1 to include BuyerImpersonation Role",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"Roles\": [\n\t    \"MeAddressAdmin\",\n\t    \"MeAdmin\",\n\t    \"MeCreditCardAdmin\",\n\t    \"MeXpAdmin\",\n\t    \"Shopper\",\n\t    \"BuyerImpersonation\"\n\t],\n}"
						},
						"url": {
							"raw": "{{baseApiUrl}}/v1/securityprofiles/buyerProfile1",
							"host": [
								"{{baseApiUrl}}"
							],
							"path": [
								"v1",
								"securityprofiles",
								"buyerProfile1"
							]
						},
						"description": "Later in the exercise, we will be working with some Buyer Impersonation - so let's `PATCH` `buyerProfile1` to include `BuyerImpersonation` as a role.  Since this profile already exists, `PATCH` will overwrite the whole object, so we need to include all the roles this profile held previously along with the new role we are including."
					},
					"response": []
				}
			],
			"description": "We've successfully created and expanded on two Buyers within our Admin Organization!  Pat yourself on the back.  Now that we have our organization structure built out a little bit, we'll move on to working with the Buyers a little bit more. \n\nThe first thing we'll need to do before working with our buyer users is assign them security profiles. Security Profiles are basically sets of Roles that you give a user, granting them access to certain endpoints within their token.  When we created our org, a security profile was created for us (`buyerProfile1`) and it contains all the roles that we will need in order to complete our requests as buyer users.  Lets assign this profile to each of our Buyers.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "6. Products and Catalogs",
			"item": [
				{
					"name": "A. Creating Products",
					"item": [
						{
							"name": "Create Product (12oz Coffee Cup)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"coffee_cups\",\r\n  \"Name\": \"Coffee Cups\",\r\n  \"Description\": \"12oz Branded Coffee Cups\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product (Coffee Beans - Whole)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"whole_coffee_beans\",\r\n  \"Name\": \"Whole Coffee Beans\",\r\n  \"Description\": \"16oz bag of our freshly roasted coffee beans.\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product (Coffee Beans - Ground)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"ground_coffee_beans\",\r\n  \"Name\": \"Ground Coffee Beans\",\r\n  \"Description\": \"16oz bag of our freshly ground coffee beans. Our grind is optimal for pour over coffee brewing.\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product (Barista Apron)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"barista_apron\",\r\n  \"Name\": \"Barista Apron\",\r\n  \"Description\": \"Our barista aprons are the perfect mix of practicality and fashion.\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product (Espresso Tamper)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"espresso_tamper\",\r\n  \"Name\": \"Espresso Tamper\",\r\n  \"Description\": \"A premium convex espresso tamper.\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product (Vanilla Flavoring Syrup)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"vanilla_flavoring_syrup\",\r\n  \"Name\": \"Vanilla Flavoring Syrup\",\r\n  \"Description\": \"A premium syrup used for flavoring beverages.\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product (White Chocolate Flavoring)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"white_chocolate_flavoring\",\r\n  \"Name\": \"White Chocolate Flavoring\",\r\n  \"Description\": \"A premium white chocolate flavoring for use in food and beverage.\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product (Bar Towels)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"bar_towels\",\r\n  \"Name\": \"Bar Towels (Pack of 8)\",\r\n  \"Description\": \"Pack of 8 premium bar towels.\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product (Croissants)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"DefaultPriceScheduleID\": \"\",\r\n  \"ID\": \"croissants\",\r\n  \"Name\": \"Croissants (Pack of 8)\",\r\n  \"Description\": \"Pack of 8 French style croissants.\",\r\n  \"QuantityMultiplier\": 1,\r\n  \"ShipWeight\": 0,\r\n  \"ShipHeight\": 0,\r\n  \"ShipWidth\": 0,\r\n  \"ShipLength\": 0,\r\n  \"Active\": true,\r\n  \"xp\": {},\r\n  \"ShipFromAddressID\": \"\",\r\n  \"Inventory\": {\r\n    \"Enabled\": false,\r\n    \"NotificationPoint\": 0,\r\n    \"VariantLevelTracking\": false,\r\n    \"OrderCanExceed\": false,\r\n    \"QuantityAvailable\": 0\r\n  },\r\n  \"DefaultSupplierID\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get List of Products",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products"
									]
								}
							},
							"response": []
						}
					],
					"description": "To start off, let's create several products.  These products are created in isolation, and then made visible to the end buyer user through various assignments.  These relationships are collectively referred to as Product Visibility.  Creating products is another administrative task, so we will be authenticating as the admin user, using the `admin_token`.\n\nRun the requests to create 9 products, and then List all the products to see them return.  ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "B. Creating a Catalog",
					"item": [
						{
							"name": "Create Catalog",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"nlc_catalog\",\r\n  \"Name\": \"Northern Lights Coffee Product Catalog\",\r\n  \"Description\": \"Products all supplied by Northern Lights Coffee Roastery\",\r\n  \"Active\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Catalogs",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that we have our 9 products, we need to associate them with a catalog that the Seller Org can offer to it's buyers (at varying levels of visibility) in order for the buyers to order products.\n\nLet's create the catalog.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "C. Assign Catalog to Buyers",
					"item": [
						{
							"name": "Assign Catalog to Buyer (Metro Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CatalogID\": \"nlc_catalog\",\r\n    \"BuyerID\": \"metro_coffee\",\r\n    \"ViewAllCategories\": true,\r\n    \"ViewAllProducts\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Catalog to Buyer (Cloud Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"CatalogID\": \"nlc_catalog\",\r\n    \"BuyerID\": \"cloud_coffee\",\r\n    \"ViewAllCategories\": true,\r\n    \"ViewAllProducts\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Catalog Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"assignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Our catalog is created, now let's assign the catalog (`nlc_catalog`) to both of our Buyers, so that they both have access to it.  To start off with, we will have `ViewAllCategories` and `ViewAllProducts` set to `true`, so that the Buyers call view all the Products in this catalog.  We will refine visibility later.  You can read about product visibility <a href=\"https://ordercloud.io/main-concepts/product-visibility\" target=\"_blank\">here</a>.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "D. Creating Categories",
					"item": [
						{
							"name": "Create Category (Coffee Supplies)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"coffee_supplies\",\r\n  \"Name\": \"Coffee Supplies\",\r\n  \"Description\": \"Supplies for use brewing and making coffee beverages\",\r\n  \"ListOrder\": 1,\r\n  \"Active\": true,\r\n  \"ParentID\": \"\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Category (Coffeehouse Essentials)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"coffeehouse_essentials\",\r\n  \"Name\": \"Coffeehouse Essentials\",\r\n  \"Description\": \"Essentials for everday operations at coffee establishments\",\r\n  \"ListOrder\": 1,\r\n  \"Active\": true,\r\n  \"ParentID\": \"\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Category (Coffeehouse Snacks)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"coffeehouse_snacks\",\r\n  \"Name\": \"Coffeehouse Snacks\",\r\n  \"Description\": \"Snacks perfect to stock your bakery case.\",\r\n  \"ListOrder\": 1,\r\n  \"Active\": true,\r\n  \"ParentID\": \"\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Categories",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that we have the catalog created and assigned to both buyers, lets refine the catalog by adding Categories.  The following requests require that we have a defined `catalog_id` to associate these categories to - let's add our catalog ID (`nlc_catalog`) to our envirnoment variables. \n\nRun the requests to create 3 different categories: Coffee Supplies, Coffehouse Essentials and Coffeehouse Snacks.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "E. Assign Products to Categories",
					"item": [
						{
							"name": "Assign Product (Coffee Cups) to Category (Coffeehouse Essentials)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_essentials\",\r\n  \"ProductID\": \"coffee_cups\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Espresso Tamp) to Category (Coffeehouse Essentials)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_essentials\",\r\n  \"ProductID\": \"espresso_tamper\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Barista Apron) to Category (Coffeehouse Essentials)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_essentials\",\r\n  \"ProductID\": \"barista_apron\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Bar Towels) to Category (Coffeehouse Essentials)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_essentials\",\r\n  \"ProductID\": \"bar_towels\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Coffee Beans - Ground) to Category (Coffee Supplies)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffee_supplies\",\r\n  \"ProductID\": \"ground_coffee_beans\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Coffee Beans - Whole) to Category (Coffee Supplies)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffee_supplies\",\r\n  \"ProductID\": \"whole_coffee_beans\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Vanilla Flavoring Syrup) to Category (Coffee Supplies)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffee_supplies\",\r\n  \"ProductID\": \"vanilla_flavoring_syrup\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (White Chocolate Flavoring) to Category (Coffee Supplies)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffee_supplies\",\r\n  \"ProductID\": \"white_chocolate_flavoring\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Croissants) to Category (Coffeehouse Snacks)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_snacks\",\r\n  \"ProductID\": \"croissants\",\r\n  \"ListOrder\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product Category Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"productassignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "Our products and categories were created in isolation from each other.  In order to organize our catalog, we'll want to make assignments between our Product and Categories.  By doing so, we are organizing our catalog into a sort of hierarchical structure. \n\nFollow and run all the requests to assign each Product to a Category.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "F. Create Price Schedules",
					"item": [
						{
							"name": "Create Price Schedule (Bar Towels)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"bar_towels\",\r\n  \"Name\": \"Bar Towels\",\r\n  \"ApplyTax\": true,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 12.99\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (Barista Apron)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"barista_apron\",\r\n  \"Name\": \"Barista Apron\",\r\n  \"ApplyTax\": false,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 24.99\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (Coffee Cups)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"coffee_cups\",\r\n  \"Name\": \"Coffee Cups\",\r\n  \"ApplyTax\": true,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 25,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 32.60\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (Espresso Tamper - Metro Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"espresso_tamper_metrocoffee\",\r\n  \"Name\": \"Espresso Tamper - Metro Coffee\",\r\n  \"ApplyTax\": true,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 49.98\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (Espresso Tamper - Cloud Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"espresso_tamper_cloudcoffee\",\r\n  \"Name\": \"Espresso Tamper - Cloud Coffee\",\r\n  \"ApplyTax\": false,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 22.00\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (Ground Coffee Beans)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"ground_coffee_beans\",\r\n  \"Name\": \"Coffee Beans - Ground\",\r\n  \"ApplyTax\": true,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 12.98\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (Vanilla Flavoring Syrup)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"vanilla_flavoring_syrup\",\r\n  \"Name\": \"Vanilla Flavoring Syrup\",\r\n  \"ApplyTax\": true,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 8.99\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (White Chocolate Flavoring)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"white_chocolate_flavoring\",\r\n  \"Name\": \"White Chocolatae Flavoring\",\r\n  \"ApplyTax\": true,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 9.99\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (Whole Coffee Beans)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"whole_coffee_beans\",\r\n  \"Name\": \"Coffee Beans - Whole\",\r\n  \"ApplyTax\": true,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 12.98\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Schedule (Croissants)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"croissants\",\r\n  \"Name\": \"Croissants - Pack of 8\",\r\n  \"ApplyTax\": true,\r\n  \"ApplyShipping\": true,\r\n  \"MinQuantity\": 1,\r\n  \"UseCumulativeQuantity\": false,\r\n  \"RestrictedQuantity\": false,\r\n  \"PriceBreaks\": [\r\n    {\r\n      \"Quantity\": 1,\r\n      \"Price\": 25.98\r\n    }\r\n  ],\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Price Schedules",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/priceschedules",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"priceschedules"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now we have an organized product catalog, we need to create Price Schedules for each of the Products.  For each of our products, we are going to create a price schedule that represents how much that product costs.  However, for one product, we will make _two_ price schedules.  Each price schedule in this scenario will represent different prices for the different coffee shops (Buyers).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "G. Assign Products Default Price Schedules",
					"item": [
						{
							"name": "Patch Default Price Schedule (Bar Towels)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"DefaultPriceScheduleID\": \"bar_towels\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/bar_towels",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"bar_towels"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Default Price Schedule (Barista Apron)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"DefaultPriceScheduleID\": \"barista_apron\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/barista_apron",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"barista_apron"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Default Price Schedule (Coffee Cups)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"DefaultPriceScheduleID\": \"coffee_cups\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/coffee_cups",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"coffee_cups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Default Price Schedule (Ground Coffee Beans)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"DefaultPriceScheduleID\": \"ground_coffee_beans\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/ground_coffee_beans",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"ground_coffee_beans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Default Price Schedule (Vanilla Flavoring Syrup)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"DefaultPriceScheduleID\": \"vanilla_flavoring_syrup\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/vanilla_flavoring_syrup",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"vanilla_flavoring_syrup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Default Price Schedule (White Chocolate Flavoring)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"DefaultPriceScheduleID\": \"white_chocolate_flavoring\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/white_chocolate_flavoring",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"white_chocolate_flavoring"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Default Price Schedule (Whole Coffee Beans)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"DefaultPriceScheduleID\": \"whole_coffee_beans\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/whole_coffee_beans",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"whole_coffee_beans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Default Price Schedule (Croissants)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"DefaultPriceScheduleID\": \"croissants\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/croissants",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"croissants"
									]
								}
							},
							"response": []
						}
					],
					"description": "One of the factors of product visibility is Product / Price Schedule assignments.  If your goal is to have a product that has the same price across all your different buyers, then an easy way to accomplish this is to assign each Product a `DefaultPriceScheduleID`.  This eliminates the need to make explicit Product/PriceSchedule/Buyer|UserGroup assignments.  \n\nLet's `PATCH` our products that have one price schedule and add the respective `PriceScheduleID` to the `DefaultPriceScheduleID` field.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "H. Assign Products to Catalog (nlc_catalog)",
					"item": [
						{
							"name": "Assign Product (Bar Towels) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"bar_towels\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Barista Apron) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"barista_apron\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Coffee Cups) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"coffee_cups\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Espresso Tamper) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"espresso_tamper\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Ground Coffee Beans) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"ground_coffee_beans\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Vanilla Flavoring Syrup) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"vanilla_flavoring_syrup\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (White Chocolate Flavoring) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"white_chocolate_flavoring\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Whole Coffee Beans) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"whole_coffee_beans\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Croissants) to Catalog (nlc_catalog)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"ProductID\": \"croissants\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Product to Catalog Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/productassignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"productassignments"
									]
								}
							},
							"response": []
						}
					],
					"description": "In order for these Products to become available within the catalog, we need to assign each of these products to the catalog.  \n\nMake the requests, then List Product Catalog Assignments to see the list of assignments just created.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "I. Assign Unique Product Price Schedules to Buyer",
					"item": [
						{
							"name": "Assign Price Schedule (Espresso Tamper) to Buyer (Metro Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ProductID\": \"espresso_tamper\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"PriceScheduleID\": \"espresso_tamper_metrocoffee\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Price Schedule (Espresso Tamper) to Buyer (Cloud Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ProductID\": \"espresso_tamper\",\n\t\"BuyerID\": \"cloud_coffee\",\n\t\"PriceScheduleID\": \"espresso_tamper_cloudcoffee\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Price Schedule Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								},
								"description": "Here we see the two Product / Party / PriceSchedule assignments we just made.  This action created a relationship between a Party, a Product and a Price Schedule."
							},
							"response": []
						},
						{
							"name": "Get Products as Buyer (Metro Coffee) User (Bill)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								},
								"description": "If we List products as a Metro Coffee Buyer User, we see the Metro Coffee Espresso Tamper Price Schedule returned."
							},
							"response": []
						},
						{
							"name": "Get Products as Buyer (Cloud Coffee) User (Grace)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_grace}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								},
								"description": "If we List products as a Cloud Coffee Buyer User, we see the Cloud Coffee Espresso Tamper Price Schedule returned."
							},
							"response": []
						}
					],
					"description": "For the product under which we created two price schedules (to differentiate pricing between buyers), we need to create a special relationship between the product /price schedule/ buyer.  To do this, we will create a Price Schedule Buyer assignment.\n\nAfter we make the assignments, we'll List Price Schedule Assignments to see those assignments we just created and after that we'll list products as different buyer users to see those different prices reflected.  In order to do this, we'll need to get different user tokens and add those to our environment variables.\n\nHead back to the Recurring Authentication section and run requests to get user tokens for both Bill and Grace.  Once you have those tokens, add them to your environment variables under `buyer_token_bill` and `buyer_token_grace`.\n\nNow, make the requests to assign each respective price schedule to buyer.  ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "J. Patch Catalog to Change Visibility Rules",
					"item": [
						{
							"name": "Patch Catalog (nlc_catalog) / Buyer (Metro Coffee) Assignment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"BuyerID\": \"metro_coffee\",\r\n  \"ViewAllCategories\": false,\r\n  \"ViewAllProducts\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Catalog (nlc_catalog) / Buyer (Cloud Coffee) Assignment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CatalogID\": \"nlc_catalog\",\r\n  \"BuyerID\": \"cloud_coffee\",\r\n  \"ViewAllCategories\": false,\r\n  \"ViewAllProducts\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Products as Buyer (Metro Coffee) User (Bill)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								}
							},
							"response": []
						}
					],
					"description": "Now that we have basic product visibility working - let's refine it.\n\n`PATCH` the Catalog Buyer Assignments to both have `ViewAllCategories` and `ViewAllProducts` set to `false`.  *After thirty seconds or so*, you should see in the last request, that Bill calling `me/products` returns _only_ the product that has an explicit assignment.  ",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "K. Assign Categories to Buyer",
					"item": [
						{
							"name": "Assign Category (Coffee Supplies) to Buyer (Cloud Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffee_supplies\",\r\n  \"BuyerID\": \"cloud_coffee\",\r\n  \"Visible\": true,\r\n  \"ViewAllProducts\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Category (Coffeehouse Snacks) to Buyer (Cloud Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_snacks\",\r\n  \"BuyerID\": \"cloud_coffee\",\r\n  \"Visible\": true,\r\n  \"ViewAllProducts\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Category (Coffeehouse Essentials) to Buyer (Cloud Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_essentials\",\r\n  \"BuyerID\": \"cloud_coffee\",\r\n  \"Visible\": true,\r\n  \"ViewAllProducts\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Category (Coffee Supplies) to Buyer (Metro Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffee_supplies\",\r\n  \"BuyerID\": \"metro_coffee\",\r\n  \"Visible\": true,\r\n  \"ViewAllProducts\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Category (Coffeehouse Essentials) to Buyer (Metro Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_essentials\",\r\n  \"BuyerID\": \"metro_coffee\",\r\n  \"Visible\": true,\r\n  \"ViewAllProducts\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Category (Coffeehouse Snacks) to Buyer (Metro Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"CategoryID\": \"coffeehouse_snacks\",\r\n  \"BuyerID\": \"metro_coffee\",\r\n  \"Visible\": true,\r\n  \"ViewAllProducts\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Category to Buyer Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/catalogs/{{catalog_id}}/categories/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"catalogs",
										"{{catalog_id}}",
										"categories",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Products as Buyer (Cloud Coffee) User (Grace)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_grace}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								},
								"description": "Now, if we List Products as a Cloud Coffee user, we should see all the products displaying again - because we made the explicit assignment between the Categories and Buyers.\n\n**NOTE: If you are _NOT_ seeing all products you would expect, it may be related to a known caching issue.  If this is the case, you can do one of two things:\n\t1. Patch all of the products and change something superficial (e.g. punctuation in the description)\n\t2. Reach out to a platform developer and have them trigger a rebuild of your product catalog.**"
							},
							"response": []
						}
					],
					"description": "Next, we are going to make different Categories visible to each of the buyers by assigning the Categories directly to the Buyers.  This is going to allow the Buyer to see the category that's assigned.\n\nWe are going to assign all categories to all buyers - but with Metro Coffee, we are going to make sure the assignment for the Coffee Supplies category has `ViewAllProducts` set to `false`.  This way, we can control Product visibility by either individual Buyer User Group or Buyer User.  In our case, we will control visibility at the Buyer User Group level.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "L. Assign Products to Buyer User Groups to refine visibility",
					"item": [
						{
							"name": "Assign Product (Van Flavor Syrup) to Buyer (Metro Coffee) User Group (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ProductID\": \"vanilla_flavoring_syrup\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"UserGroupID\": \"uptown\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (White Choc Flavor) to Buyer (Metro Coffee) User Group (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ProductID\": \"white_chocolate_flavoring\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"UserGroupID\": \"uptown\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Whole Coffee Beans) to Buyer (Metro Coffee) User Group (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ProductID\": \"whole_coffee_beans\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"UserGroupID\": \"uptown\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Ground Coffee Beans) to Buyer (Metro Coffee) User Group (Uptown)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ProductID\": \"ground_coffee_beans\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"UserGroupID\": \"uptown\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Whole Coffee Beans) to Buyer (Metro Coffee) User Group (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ProductID\": \"whole_coffee_beans\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"UserGroupID\": \"northeast\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Product (Ground Coffee Beans) to Buyer (Metro Coffee) User Group (Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ProductID\": \"ground_coffee_beans\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"UserGroupID\": \"northeast\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product to Buyer User Group Assignments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Products as Buyer (Metro Coffee - Northeast) User (Bill)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Products as Buyer (Metro Coffee - Uptown) User (Jill)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_jill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								}
							},
							"response": []
						}
					],
					"description": "To further refine visibility of Products for Metro Coffee Buyer Users, we will have to assign Products to Buyer User Groups.  We are doing this as a result of defining `ViewAllProducts: false` on the Category / Buyer assignment. \n\nWe want visibility as follows:\nMetro Coffee - Uptown: all products\nMetro Coffee - Northeast: all products *except* the Flavoring Syrups (Vanilla, White Chocolate)\n\nAt the end of this group of requests, we will be Listing products as Metro Coffee - Uptown user Jill.  Let's get an authentication token for her, and add it to our environment variables.  Go back to the Recurring Auth folder, get Jill's token and go ahead and add it.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Products are priced (or unpriced) goods that can be offered to Buyers for placement on Orders. A Product can belong to any number of Catalogs, and a Catalog can be organized into hierarchical Categories to any arbitrary depth. Catalogs are assigned to Buyers, though visibility and pricing may vary by Buyer, User Group, Category, or individual Product. Pricing may include quantity breaks (collectively called a Price Schedule), and Price Schedules may be shared with multiple Products. User-selected Specs, which may include price markups, can be assigned to Products, enabling Buyer configurability at the time of ordering.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "7. Orders and Fulfillment",
			"item": [
				{
					"name": "A. Shop Products",
					"item": [
						{
							"name": "List Products as Buyer (Metro Coffee) User (Bill)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								}
							},
							"response": []
						}
					],
					"description": "To 'Shop' for a product, make a List call to `me/products` to see what products are available to the buyer user.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "B. Create Personal Credit Card Payment Method",
					"item": [
						{
							"name": "Create Personal (Bill) Credit Card Payment Method",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"bill_visa\",\r\n  \"Token\": \"\",\r\n  \"CardType\": \"Visa\",\r\n  \"PartialAccountNumber\": \"4242\",\r\n  \"CardholderName\": \"Bill Test\",\r\n  \"ExpirationDate\": \"2024-01-01T00:00:00-06:00\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/creditcards",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"creditcards"
									]
								}
							},
							"response": []
						}
					],
					"description": "In order to pay for the products we will be ordering, we must create a payment method.  Let's create a fake credit card to be used on Bill's order.\n\nAdd the resulting `credit_card_id` to the environment variables.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "C. Create an Order",
					"item": [
						{
							"name": "Create an Outgoing Order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"bill_order\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing"
									]
								},
								"description": "Add the resulting `orderID` to the environment variables."
							},
							"response": []
						},
						{
							"name": "Create a Line Item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"bill_order_bar_towels\",\r\n  \"ProductID\": \"bar_towels\",\r\n  \"Quantity\": 1,\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/lineitems",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"lineitems"
									]
								},
								"description": "Now, let's create a line item consisting of one product and add it to our order.\n\nAdd the resulting line item `lineItemID` to the environment variables."
							},
							"response": []
						},
						{
							"name": "List Line Items",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/lineitems",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"lineitems"
									]
								},
								"description": "We can now review the line items that have been added to this order."
							},
							"response": []
						},
						{
							"name": "List My Addresses",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/addresses",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"addresses"
									]
								},
								"description": "We will need to set shipping and billing addresses for this order, so let's lake a look at the addresses available to this buyer user."
							},
							"response": []
						},
						{
							"name": "Set Shipping and Billing Address",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ShippingAddressID\": \"northeast\",\n\t\"BillingAddressID\": \"northeast\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}"
									]
								},
								"description": "Here we will `PATCH` the order to set a shipping and billing address for the order.  We will use Metro Coffee - Northeast's address for this."
							},
							"response": []
						},
						{
							"name": "Create a Payment Method",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"{{orderID}}_payment\",\r\n  \"Type\": \"CreditCard\",\r\n  \"CreditCardID\": \"{{credit_card_id}}\",\r\n  \"SpendingAccountID\": null,\r\n  \"Description\": \"Payment for Bill's Order\",\r\n  \"Amount\": null,\r\n  \"Accepted\": false,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/payments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"payments"
									]
								},
								"description": "Now, we will create a payment method on the order to pay for it.\n\nAt this stage, the payment will display as `\"Accepted\": false`, but in the next section we will process the credit card to update this.\n\nAdd the resulting `paymentID` to the environment variables."
							},
							"response": []
						},
						{
							"name": "List Order Payments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/payments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"payments"
									]
								},
								"description": "You can now list the payments for this order to review what was added."
							},
							"response": []
						}
					],
					"description": "In this section, we will create an order, add a line item to the order, and run a GET request to review the line items on the order.  We will also review our addresses and patch the order to set a shipping and billing address.  Finally, we will post a payment method to the order and review the payments on the order.\n\nTo get started, we will create an outgoing order.  Orders are considered \"outgoing\" from the perspective of a buyer user, and \"incoming\" from the perspective of a seller user.  When introducing the concept of a supplier user, orders that suppliers receive from customers are referred to as \"incoming\" while orders that go sellers are regaraded as \"outgoing.\"  In this instance, we are only focused an order that a buyer user is creating and will POST an outgoing order.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "D. Process Credit Card",
					"item": [
						{
							"name": "Create A New Payment Transaction (Authorize)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"authorize\",\r\n  \"Type\": \"CreditCard\",\r\n  \"DateExecuted\": \"2020-04-23T00:00:00-06:00\",\r\n  \"Succeeded\": true,\r\n  \"ResultCode\": \"I00001\",\r\n  \"ResultMessage\": \"Successful\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}/payments/{{paymentID}}/transactions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}",
										"payments",
										"{{paymentID}}",
										"transactions"
									]
								},
								"description": "This step will authorize the credit card to ensure it is valid."
							},
							"response": []
						},
						{
							"name": "Create A New Payment Transaction (Capture)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"capture\",\r\n  \"Type\": \"CreditCard\",\r\n  \"DateExecuted\": \"2020-04-23T00:00:00-06:00\",\r\n  \"Succeeded\": true,\r\n  \"ResultCode\": \"I00001\",\r\n  \"ResultMessage\": \"Successful\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}/payments/{{paymentID}}/transactions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}",
										"payments",
										"{{paymentID}}",
										"transactions"
									]
								},
								"description": "This step will capture the payment, which is typically done when the order ships."
							},
							"response": []
						},
						{
							"name": "Patch Payment to be Accepted (Mimicking successful CC charge)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Accepted\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}/payments/{{paymentID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}",
										"payments",
										"{{paymentID}}"
									]
								},
								"description": "Now that we have both authorized and captured this payment, we will `PATCH` the Payment to have `Accepted: true`, mimicking a succesful credit card transaction."
							},
							"response": []
						}
					],
					"description": "Now that we have added the payment method, let's review this from an Admin user's perspective.  \n\nA typical flow for capturing payment is to first authorize the payment, and then capture it.  Generally payment is captured after a shipment has been made, but for this exercise, we will authorize and capture the payment right away.\n\nBecause we are viewing this from an Admin user's perspective, notice that the Orders we are wokring with are considered \"Incoming\" orders instead of \"Outgoing.\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "E. Submit an Order",
					"item": [
						{
							"name": "Submit Your Order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/submit",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"submit"
									]
								}
							},
							"response": []
						}
					],
					"description": "Our order now has line items, and the payment has been authorized and captured.  Let's submit the order!",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "F. Create Order Shipment",
					"item": [
						{
							"name": "Create Order Shipment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"bill_order_shipment\",\r\n  \"BuyerID\": \"metro_coffee\",\r\n  \"Shipper\": null,\r\n  \"DateShipped\": null,\r\n  \"DateDelivered\": null,\r\n  \"TrackingNumber\": null,\r\n  \"ToAddressID\": \"northeast\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments"
									]
								},
								"description": "Add the resulting `shipmentID` to the environment variables."
							},
							"response": []
						},
						{
							"name": "Create Shipment Item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"OrderID\": \"{{orderID}}\",\r\n  \"LineItemID\": \"{{lineItemID}}\",\r\n  \"QuantityShipped\": 1\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments/{{shipmentID}}/items",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments",
										"{{shipmentID}}",
										"items"
									]
								},
								"description": "This step will indicate which line item we are updating and how many of that item is included in this shipment."
							},
							"response": []
						},
						{
							"name": "List Shipments for this Order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/Incoming/{{orderID}}/shipments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"Incoming",
										"{{orderID}}",
										"shipments"
									]
								},
								"description": "This will get us a list of any shipments that have been created for this order."
							},
							"response": []
						},
						{
							"name": "List Shipment Items for this Shipment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments/{{shipmentID}}/items",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments",
										"{{shipmentID}}",
										"items"
									]
								},
								"description": "This will get us a list of any line items included in the shipment we created."
							},
							"response": []
						},
						{
							"name": "Get Order (that was just shipped)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}"
									]
								},
								"description": "Now we can review the order, which now has a Shipment with a Shipment Item.\n\nObserve that the `Status` is still `Open`.  This is because we haven't give the order a `DateShipped` yet.  Let's `PATCH` the order and give it a `DateShipped`."
							},
							"response": []
						},
						{
							"name": "Patch Shipment with ShipmentDate",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ID\": \"{{shipmentID}}\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"DateShipped\": \"2020-04-24T00:00:00-09:48\",\n\t\"ToAddressID\": \"northeast\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments/{{shipmentID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments",
										"{{shipmentID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List The Shipped Order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}"
									]
								},
								"description": "Now we observe the order has a status of `Completed`.  You've officially placed your first order through OrderCloud!"
							},
							"response": []
						}
					],
					"description": "Now that we have a submitted order, it's time to create a shipment.  After creating the shipment, we will then create shipment items (containing the line items from the order), and then we will ship the order. \n\nPlease note that Order Shipments must be created with `ShippedDate: null`, or you will have issues 'closing' the order.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Now that our product catalogs are all complete with products, categories and refined visibility, we are ready to place an order!  In this section, we will get a list of products available for a buyer user and create a credit card payment method to pay for the products.  Then, we will explore how to create an order, add line items to the order, process the payment, and submit the order.  Once this has been submitted, we will create a shipment and indicate which items belong to that shipment.\n\nTo get started, we will place an order with the Metro Coffee - Northeast Buyer User Bill.  Follow through these requests to complete the order.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "8. Promotions and Approval Rules",
			"item": [
				{
					"name": "A. Create Promotion",
					"item": [
						{
							"name": "Create Promotion (BOGO Whole Coffee Beans)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"whole_coffee_bean_BOGO\",\r\n  \"Code\": \"BOGO\",\r\n  \"Name\": \"BOGO Whole Coffee Beans\",\r\n  \"RedemptionLimit\": null,\r\n  \"RedemptionLimitPerUser\": 2,\r\n  \"Description\": \"Buy one of our premium whole coffee bean 1lb bags, get one free!\",\r\n  \"FinePrint\": \"Limit two per customer.\",\r\n  \"StartDate\": \"2019-10-01T00:00:00-06:00\",\r\n  \"ExpirationDate\": \"2025-11-01T00:00:00-06:00\",\r\n  \"EligibleExpression\": \"items.quantity(ProductID = 'whole_coffee_beans') > 1\",\r\n  \"ValueExpression\": \"items.total(ProductID = 'whole_coffee_beans') / items.quantity(ProductID = 'whole_coffee_beans')\",\r\n  \"CanCombine\": false,\r\n  \"AllowAllBuyers\": true,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/promotions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"promotions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Promotion ($5 Off Order When you order Bar Towels)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"5off\",\r\n  \"Code\": \"5OFF\",\r\n  \"Name\": \"$5 Off Order\",\r\n  \"RedemptionLimit\": null,\r\n  \"RedemptionLimitPerUser\": null,\r\n  \"Description\": \"Get $5 off your order total when you order at least 1 Bar Towel!\",\r\n  \"FinePrint\": \"Metro Coffee users only.\",\r\n  \"StartDate\": \"2019-10-01T00:00:00-06:00\",\r\n  \"ExpirationDate\": \"2025-11-01T00:00:00-06:00\",\r\n  \"EligibleExpression\": \"items.any(ProductID = 'bar_towels')\",\r\n  \"ValueExpression\": \"5\",\r\n  \"CanCombine\": false,\r\n  \"AllowAllBuyers\": false,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/promotions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"promotions"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Promotions as Buyer (Metro Coffee) User (Bill)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/promotions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"promotions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Promotion (5off) to Buyer (Metro Coffee)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"PromotionID\": \"5off\",\r\n  \"BuyerID\": \"metro_coffee\",\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/promotions/assignments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"promotions",
										"assignments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Promotions as Buyer (Metro Coffee) User (Bill)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/promotions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"promotions"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "B. Redeem Promotion on an Order",
					"item": [
						{
							"name": "Create an Outogoing Order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"bill_promo_order\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing"
									]
								},
								"description": "Make sure to update `orderID` in the environment variables."
							},
							"response": []
						},
						{
							"name": "Create a Line Item",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"bill_promo_order_bar_towels\",\r\n  \"ProductID\": \"bar_towels\",\r\n  \"Quantity\": 100,\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/lineitems",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"lineitems"
									]
								},
								"description": "Make sure to update the `lineItemID` in the environment variables."
							},
							"response": []
						},
						{
							"name": "List Line Items",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/lineitems",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"lineitems"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Shipping and Billing Address",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ShippingAddressID\": \"northeast\",\n\t\"BillingAddressID\": \"northeast\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Promotion to Order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/promotions/5off",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"promotions",
										"5off"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Order (See Promo Applied)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Payment Method",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"{{orderID}}_payment\",\r\n  \"Type\": \"CreditCard\",\r\n  \"CreditCardID\": \"{{credit_card_id}}\",\r\n  \"SpendingAccountID\": null,\r\n  \"Description\": \"Payment for Bill's Order\",\r\n  \"Amount\": null,\r\n  \"Accepted\": false,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/payments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"payments"
									]
								},
								"description": "Make sure to update `paymentID` in the environment variables."
							},
							"response": []
						}
					]
				},
				{
					"name": "C. Create an Approval Rule for Cloud Coffee - Uptown",
					"item": [
						{
							"name": "Create Approval Rule",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"metro_coffee_northeast_approval\",\r\n  \"Name\": \"Metro Coffee - Northeast Approval\",\r\n  \"Description\": \"Approval needed for all orders over $100.00 made from Metro Coffee's Northeast location.\",\r\n  \"ApprovingGroupID\": \"uptown\",\r\n  \"RuleExpression\": \"order.Total > 100\",\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/approvalrules/",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"approvalrules",
										""
									]
								},
								"description": "Make sure to change the `buyerID` in the environment variables to be `metro_coffee` before you send this request.  This will ensure the approval rule is put on the correct buyer."
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "D. Process Credit Card",
					"item": [
						{
							"name": "Create A New Payment Transaction (Authorize)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"authorize\",\r\n  \"Type\": \"CreditCard\",\r\n  \"DateExecuted\": \"2019-10-23T00:00:00-06:00\",\r\n  \"Succeeded\": true,\r\n  \"ResultCode\": \"I00001\",\r\n  \"ResultMessage\": \"Successful\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}/payments/{{paymentID}}/transactions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}",
										"payments",
										"{{paymentID}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create A New Payment Transaction (Capture)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"capture\",\r\n  \"Type\": \"CreditCard\",\r\n  \"DateExecuted\": \"2019-10-23T00:00:00-06:00\",\r\n  \"Succeeded\": true,\r\n  \"ResultCode\": \"I00001\",\r\n  \"ResultMessage\": \"Successful\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}/payments/{{paymentID}}/transactions",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}",
										"payments",
										"{{paymentID}}",
										"transactions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Payment to be Accepted (Mimicking successful CC charge)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Accepted\": true\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}/payments/{{paymentID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}",
										"payments",
										"{{paymentID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "E. Submit the Order",
					"item": [
						{
							"name": "Sumbit Your Order",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/submit",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"submit"
									]
								},
								"description": "Observe order `Status` is now `AwaitingApproval`.  This means that the order requires approval before it can be submitted."
							},
							"response": []
						}
					]
				},
				{
					"name": "F. Approve the Order as Uptown User (Jill)",
					"item": [
						{
							"name": "List Order Approvers",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}/eligibleapprovers",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}",
										"eligibleapprovers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve Order (Notice \"OrderStatus\": \"Open\")",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_jill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"Comments\": \"Looks good!\",\r\n  \"AllowResubmit\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/approve",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"approve"
									]
								},
								"description": "Notice that the order status now reflects `Open`."
							},
							"response": []
						},
						{
							"name": "List Order Approvals",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/outgoing/{{orderID}}/approvals",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"outgoing",
										"{{orderID}}",
										"approvals"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "G. Create Partial Order Shipment",
					"item": [
						{
							"name": "Create Order Shipment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"{{orderID}}_shipment\",\r\n  \"BuyerID\": \"metro_coffee\",\r\n  \"Shipper\": null,\r\n  \"DateShipped\": null,\r\n  \"DateDelivered\": null,\r\n  \"TrackingNumber\": null,\r\n  \"ToAddressID\": \"northeast\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments"
									]
								},
								"description": "Make sure to update `shipmentID` in the environment variables."
							},
							"response": []
						},
						{
							"name": "Create Partial Shipment Item (50 Bar Towels)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"OrderID\": \"{{orderID}}\",\r\n  \"LineItemID\": \"{{lineItemID}}\",\r\n  \"QuantityShipped\": 50\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments/{{shipmentID}}/items",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments",
										"{{shipmentID}}",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Shipments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Shipment Items",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments/{{shipmentID}}/items",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments",
										"{{shipmentID}}",
										"items"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Order (that was just shipped)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Shipment with DateShipped",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ID\": \"{{shipmentID}}\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"DateShipped\": \"2020-10-24T00:00:00-09:48\",\n\t\"ToAddressID\": \"northeast\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments/{{shipmentID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments",
										"{{shipmentID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Patch Shipment with DateDelivered",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ID\": \"{{shipmentID}}\",\n\t\"BuyerID\": \"metro_coffee\",\n\t\"DateShipped\": \"2020-10-24T00:00:00-09:48\",\n\t\"DateDelivered\": \"2020-10-25T00:00:00-09:48\",\n\t\"ToAddressID\": \"northeast\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/shipments/{{shipmentID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"shipments",
										"{{shipmentID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List The Shipped Order (Notice \"OrderStatus\": \"Open\"",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/orders/incoming/{{orderID}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"orders",
										"incoming",
										"{{orderID}}"
									]
								},
								"description": "Now, you'll notice even though we have made a shipment, the `Status` is still `Open`.  This is because in order for an order status to be `Complete`, you must have shipped _ALL_ line items within an order.  \n\nThis order we will leave as `Status: Open`."
							},
							"response": []
						}
					]
				}
			],
			"description": "Next, we are going to create an two Ordercloud Promotions as well as an Approval Rule.  Then, we will redeem a promotion on an order, and hit the approval criteria so that it must go through approval.  After that, we will pretend that our supplier only has some of the inventory required to fulfill the order, so we will create a partial order shipment.  \n\nFollow through the requests to complete this prompt.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "9. Product XP Filtering and Faceting",
			"item": [
				{
					"name": "A. Add 2 XP Values to All Products",
					"item": [
						{
							"name": "Add xp.Brand and xp.Size to Coffee Cups",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Uline\",\n\t\t\"Size\": \"12oz\"\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/coffee_cups",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"coffee_cups"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add xp.Brand and xp.Size to Coffee Beans - Whole",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Northern Lights Coffee\",\n\t\t\"Size\": \"1lb\"\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/whole_coffee_beans",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"whole_coffee_beans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add xp.Brand and xp.Size to Coffee Beans - Ground",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Northern Lights Coffee\",\n\t\t\"Size\": \"1lb\"\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/ground_coffee_beans",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"ground_coffee_beans"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add xp.Brand and xp.Size to Barista Apron",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Uline\",\n\t\t\"Size\": \"One-Size\"\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/barista_apron",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"barista_apron"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add xp.Brand to Espresso Tamper",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Benicci\",\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/espresso_tamper",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"espresso_tamper"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add xp.Brand and xp.Size to Vanilla Flavoring Syrup",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Torani\",\n\t\t\"Size\": \"750mL\"\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/vanilla_flavoring_syrup",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"vanilla_flavoring_syrup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add xp.Brand and xp.Size to White Chocolate Flavoring",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Torani\",\n\t\t\"Size\": \"750mL\"\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/white_chocolate_flavoring",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"white_chocolate_flavoring"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add xp.Brand and xp.Size to Bar Towels",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Uline\",\n\t\t\"Size\": \"10x10in\"\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/bar_towels",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"bar_towels"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add xp.Brand to Croissants",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"xp\": {\n\t\t\"Brand\": \"Northern Lights Coffee\",\n\t}\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/products/croissants",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"products",
										"croissants"
									]
								}
							},
							"response": []
						}
					],
					"description": "Let's add two XP values to each of our products: Brand and Size.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "B. Search products for new XP Values",
					"item": [
						{
							"name": "Add Index for xp.Size",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Key\": \"Size\",\n\t\"ThingType\": \"Product\"\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/xpindices",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"xpindices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Products with 'Size' of '12oz'",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products?xp.Size=12oz",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									],
									"query": [
										{
											"key": "xp.Size",
											"value": "12oz"
										}
									]
								},
								"description": "Now, if we search products with `Size: 12oz`, we should see our products with that XP value."
							},
							"response": []
						}
					],
					"description": "Now that our products have XP, we are able to search based on these XP values (Read about Premium Search here: https://ordercloud.io/intro-to-premium-search/).",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "C. Add Product Facets",
					"item": [
						{
							"name": "Create 'Brand' Product Facet",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"Brand\",\r\n  \"Name\": \"Brand\",\r\n  \"XpPath\": \"Brand\",\r\n  \"ListOrder\": 1,\r\n  \"MinCount\": 0,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/productfacets",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"productfacets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create 'Size' Product Facet",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"Size\",\r\n  \"Name\": \"Size\",\r\n  \"XpPath\": \"Size\",\r\n  \"ListOrder\": 2,\r\n  \"MinCount\": 0,\r\n  \"xp\": {}\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/productfacets",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"productfacets"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Facets",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/productfacets",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"productfacets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Products (Observe Facets at the top)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_bill}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								},
								"description": "Notice the facets were returned at the top!"
							},
							"response": []
						}
					],
					"description": "Let's add product facets. Facets are a list of the potential fields and values that you can filter on. These are often displayed in a column on the left on ecommerce websites.  Now that premium search comes standard with every new Org, we should see facets returned at the top of any `me/products` call.\n\nWhen returning facets, if there is no XpPath defined and there is no non-xp property related to the facet, OrderCloud will look at xp.[facetID] so you can also include the xp field as the ID. The facets that are returned at the top of the me products list will typically be displayed on the UI. When a facet it selected it is typically added as a filter on another me list products call which will then return facets available only under that filter.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Let's dive into Product XP Filtering and Faceting. Read more about XP here: https://ordercloud.io/xp-best-practices/",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "10. Impersonation",
			"item": [
				{
					"name": "Impersonate Buyer User as Admin User",
					"item": [
						{
							"name": "List Admin User (To gather ID)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me"
									]
								},
								"description": "In order to create an impersonation config for the admin user, you are going to need the `adminUserID`. To get your admin user's ID, perform a `GET v1/me` call using your admin user's token, and add the resulting `ID` to your environment variables as `adminUserID`."
							},
							"response": []
						},
						{
							"name": "Create Impersonation Config (Admin impersonate Buyer)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"nlc_admin_impersonate_buyer\",\r\n  \"ImpersonationBuyerID\": null,\r\n  \"ImpersonationGroupID\": null,\r\n  \"ImpersonationUserID\": \"{{adminUserID}}\",\r\n  \"BuyerID\": \"metro_coffee\",\r\n  \"GroupID\": null,\r\n  \"UserID\": null,\r\n  \"SecurityProfileID\": \"buyerProfile1\",\r\n  \"ClientID\": \"{{clientID_buyer}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/impersonationconfig",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"impersonationconfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Buyer Token as Admin User",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ClientID\": \"{{client_id}}\",\n\t\"Roles\": [\n        \"MeAddressAdmin\",\n        \"MeAdmin\",\n        \"MeCreditCardAdmin\",\n        \"MeXpAdmin\",\n        \"Shopper\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users/bill/accesstoken",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users",
										"bill",
										"accesstoken"
									]
								}
							},
							"response": []
						}
					],
					"description": "Impersonation can be done with either an Admin user impersonating a Buyer User, or a Buyer User Impersonating another Buyer User.  First, we'll set up a config for an Admin User to impersonate a Buyer User.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Impersonate Buyer User As Another Buyer User",
					"item": [
						{
							"name": "List Admin Users",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/adminusers",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"adminusers"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Impersonation Config (Uptown impersonate Northeast)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ID\": \"uptown_impersonate_northeast\",\r\n  \"ImpersonationBuyerID\": \"metro_coffee\",\r\n  \"ImpersonationGroupID\": \"uptown\",\r\n  \"ImpersonationUserID\": null,\r\n  \"BuyerID\": \"metro_coffee\",\r\n  \"GroupID\": \"northeast\",\r\n  \"UserID\": null,\r\n  \"SecurityProfileID\": \"buyerProfile1\",\r\n  \"ClientID\": \"{{client_id}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/impersonationconfig",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"impersonationconfig"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Buyer Token as another Buyer User",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{buyer_token_jill}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ClientID\": \"{{clientID_buyer}}\",\n\t\"Roles\": [\n\t\t\"MeAddressAdmin\",\n        \"MeAdmin\",\n        \"MeCreditCardAdmin\",\n        \"MeXpAdmin\",\n        \"Shopper\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/buyers/{{buyerID}}/users/bill/accesstoken",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"buyers",
										"{{buyerID}}",
										"users",
										"bill",
										"accesstoken"
									]
								}
							},
							"response": []
						}
					],
					"description": "As a buyer user in group A , another user in group B calls me up and wants me to create and order on their behalf. (e.g. Customer Service Rep takes order for one of their stores, this is a key concept in Aveda) check out the [impersonation guide]('https://developer.ordercloud.io/documentation/platform-guides/authentication/impersonation/overview').\n\nLets set up an Impersonation Config to allow users in Metro Coffee - Uptown to impersonate users in Metro Coffee - Northeast.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Set Up Default Context User",
					"item": [
						{
							"name": "List API Clients",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/apiclients",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"apiclients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Seller API Client with DefaultContextUserName (nlc_admin)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ID\": \"4ACDE590-9B23-4CF6-AAFF-BC084FC4178F\",\r\n    \"ClientSecret\": null,\r\n    \"AccessTokenDuration\": 500,\r\n    \"Active\": true,\r\n    \"AppName\": \"Seller App\",\r\n    \"RefreshTokenDuration\": 0,\r\n    \"DefaultContextUserName\": \"xc_amitpatel\",\r\n    \"xp\": null,\r\n    \"AllowAnyBuyer\": false,\r\n    \"AllowAnySupplier\": false,\r\n    \"AllowSeller\": true,\r\n    \"IsAnonBuyer\": false,\r\n    \"AssignedBuyerCount\": 0,\r\n    \"AssignedSupplierCount\": 0\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/apiclients/{{clientID_seller}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"apiclients",
										"{{clientID_seller}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Put Buyer API Client with DefaultContextUserName (jill)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ID\": \"746DEC92-6811-492D-9467-30F2F5F31CB9\",\r\n    \"ClientSecret\": null,\r\n    \"AccessTokenDuration\": 500,\r\n    \"Active\": true,\r\n    \"AppName\": \"Buyer App\",\r\n    \"RefreshTokenDuration\": 0,\r\n    \"DefaultContextUserName\": \"jill\",\r\n    \"xp\": null,\r\n    \"AllowAnyBuyer\": true,\r\n    \"AllowAnySupplier\": false,\r\n    \"AllowSeller\": false,\r\n    \"IsAnonBuyer\": false,\r\n    \"AssignedBuyerCount\": 0,\r\n    \"AssignedSupplierCount\": 0\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/apiclients/{{clientID_buyer}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"apiclients",
										"{{clientID_buyer}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Sometimes integrations with a 3rd party tech teams needs to be made, and they need access to the orders info, so they can update info on their system automatically. Configure a default context user, that the 3rd party team can use.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create New 'Integrations' API Client",
					"item": [
						{
							"name": "Create API Client",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"ClientSecret\": \"super-secret-and-secure-client-secret-key\",\r\n  \"AccessTokenDuration\": 500,\r\n  \"Active\": true,\r\n  \"AppName\": \"Integrations\",\r\n  \"RefreshTokenDuration\": 0,\r\n  \"DefaultContextUserName\": null,\r\n  \"xp\": {},\r\n  \"AllowAnyBuyer\": false,\r\n  \"AllowAnySupplier\": false,\r\n  \"AllowSeller\": true,\r\n  \"IsAnonBuyer\": false\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/apiclients",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"apiclients"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as Default Context Seller User",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "client_id={{clientID_seller}}&grant_type=client_credentials&client_secret=super-secret-and-secure-client-secret-key&scope=FullAccess"
								},
								"url": {
									"raw": "{{baseApiUrl}}/oauth/token",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"description": "Create a new API Client that your integration would authenticate against in order to make requests.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Configure Anonymous Shopping",
					"item": [
						{
							"name": "Put Buyer API Client with \"isAnonBuyer\": true",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"ID\": \"746DEC92-6811-492D-9467-30F2F5F31CB9\",\r\n    \"ClientSecret\": null,\r\n    \"AccessTokenDuration\": 500,\r\n    \"Active\": true,\r\n    \"AppName\": \"Buyer App\",\r\n    \"RefreshTokenDuration\": 0,\r\n    \"DefaultContextUserName\": \"bill\",\r\n    \"xp\": null,\r\n    \"AllowAnyBuyer\": true,\r\n    \"AllowAnySupplier\": false,\r\n    \"AllowSeller\": false,\r\n    \"IsAnonBuyer\": true,\r\n    \"AssignedBuyerCount\": 0,\r\n    \"AssignedSupplierCount\": 0\r\n}"
								},
								"url": {
									"raw": "{{baseApiUrl}}/v1/apiclients/{{clientID_buyer}}",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"apiclients",
										"{{clientID_buyer}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Authenticate as Anonymous User (bill)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "client_id={{clientID_buyer}}&scope=ProductReader CategoryReader MeAddressAdmin MeCreditCardAdmin Shopper&grant_type=client_credentials"
								},
								"url": {
									"raw": "{{baseApiUrl}}/oauth/token",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Products as Anon Shopper",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{admin_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseApiUrl}}/v1/me/products",
									"host": [
										"{{baseApiUrl}}"
									],
									"path": [
										"v1",
										"me",
										"products"
									]
								}
							},
							"response": []
						}
					],
					"description": "Anonymous Shopping, or Guest Checkout, is when a user is enabled to browse a catalog of products and/or checkout without registering themselves. Read more [here]('https://developer.ordercloud.io/documentation/platform-guides/authentication/anonymous-shopping/configuring-the-application')\n\nConfigure your API Client so that the DefaultContextUserName is the default buyer user you want the anonymous people to shop as. Set IsAnonBuyer.  When authenticating with the Client Credential Grant Type flow. you should get that default buyer user that you assigned.",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Impersonation is a tool that is often used in B2B scenarios for a CSR/Customer Service Rep type position.  A user calls in, and the CSR takes an order on behalf of a customer on the phone.  Let's dig into impersonation a little bit through these next few requests.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "11. Import",
			"item": [
				{
					"name": "Import Catalog Data",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"input\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:7071/admin/functions/SampleProductUploadFunction",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "7071",
							"path": [
								"admin",
								"functions",
								"SampleProductUploadFunction"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Seed",
			"item": [
				{
					"name": "https://localhost:5001/seed",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"PortalUsername\": \"xc_amitpatel\",\r\n    \"PortalPassword\": \"xcentium123\",\r\n    \"InitialAdminUsername\":\"XC_Amit_Admin\",\r\n    \"InitialAdminPassword\": \"Xcentium123!\",\r\n    \"MiddlewareBaseUrl\": \"https://four51-middleware.xcentium.net/\",\r\n    \"OrderCloudSettings\": {\r\n        \"Environment\": \"sandbox\",\r\n        \"WebhookHashKey\": \"xcentium2021\"\r\n    },\r\n    \"MarketplaceID\": \"LaurelSprings-Sandbox\",\r\n    \"MarketplaceName\": \"LaurelSprings-Sandbox\",\r\n    \"EnableAnonymousShopping\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/seed",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"seed"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}